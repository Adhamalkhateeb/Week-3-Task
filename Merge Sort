using System;

class Program
{
    static private void Merge(int[] arr, int l, int m, int r)
    {
        int n1 = m - l + 1;
        int n2 = r - m;

        int[] L = new int[n1];
        int[] R = new int[n2];

        for (int S = 0; S < n1; S++)
            L[S] = arr[l + S];

        for (int W = 0; W < n2; W++)
            R[W] = arr[m + 1 + W]; 

        int i = 0, j = 0, k = l;

        while (i < n1 && j < n2)
        {
            if (L[i] <= R[j])
            {
                arr[k] = L[i];
                i++;
            }
            else
            {
                arr[k] = R[j];
                j++;
            }
            k++;
        }

        while (i < n1)
        {
            arr[k] = L[i];
            i++;
            k++;
        }

        while (j < n2)
        {
            arr[k] = R[j];
            j++;
            k++;
        }
    }

    public static void MergeSort(int[] arr, int l, int r)
    {
        if (l < r)
        {
            int m = l + (r - l) / 2; // Correct midpoint

            MergeSort(arr, l, m);
            MergeSort(arr, m + 1, r); // Corrected recursion

            Merge(arr, l, m, r);
        }
    }

    static void Main()
    {
        int[] arr = { 10, 43, 21, 213 };

        MergeSort(arr, 0, arr.Length -1); // Corrected range

        foreach (int i in arr)
        {
            Console.Write(i + " ");
        }

        Console.WriteLine();
    }
}
