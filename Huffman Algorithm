using System;
using System.Collections.Generic;

class Node
{
    public char x; 
    public int y; 
    public Node left; 
    public Node right; 
}

class Huffman
{
    private Dictionary<char, string> codes = new Dictionary<char, string>();

    public Node BuildTree(string input)
    {
        
        Dictionary<char, int> freq = new Dictionary<char, int>();
        foreach (char c in input)
        {
            if (freq.ContainsKey(c))
                freq[c]++;
            else
                freq[c] = 1;
        }

        
        List<Node> q = new List<Node>();
        foreach (var pair in freq)
        {
            q.Add(new Node { x = pair.Key, y = pair.Value });
        }

        
        while (q.Count > 1)
        {
            q.Sort((a, b) => a.y - b.y); // Sort by frequency

            Node left = q[0];
            Node right = q[1];
            q.RemoveAt(0);
            q.RemoveAt(0);

            Node parent = new Node
            {
                y = left.y + right.y,
                left = left,
                right = right
            };

            q.Add(parent);
        }

        return q[0]; // Root node
    }

    public void GenerateCodes(Node root, string code)
    {
        if (root == null) return;

        if (root.left == null && root.right == null)
        {
            codes[root.x] = code;
        }

        GenerateCodes(root.left, code + "0");
        GenerateCodes(root.right, code + "1");
    }

    public string Encode(string input)
    {
        string result = "";
        foreach (char c in input)
        {
            result += codes[c];
        }
        return result;
    }

    public string Decode(string encoded, Node root)
    {
        string output = "";
        Node current = root;

        foreach (char bit in encoded)
        {
            if (bit == '0') current = current.left;
            else current = current.right;

            if (current.left == null && current.right == null)
            {
                output += current.x;
                current = root;
            }
        }

        return output;
    }

    public void PrintCodes()
    {
        foreach (var kvp in codes)
        {
            Console.WriteLine($"'{kvp.Key}' -> {kvp.Value}");
        }
    }
}

class Program
{
    static void Main()
    {
        Console.Write("Enter text: ");
        string input = Console.ReadLine();

        Huffman h = new Huffman();
        Node root = h.BuildTree(input);
        h.GenerateCodes(root, "");

        Console.WriteLine("\nHuffman Codes:");
        h.PrintCodes();

        string encoded = h.Encode(input);
        Console.WriteLine("\nEncoded: " + encoded);

        string decoded = h.Decode(encoded, root);
        Console.WriteLine("Decoded: " + decoded);
    }
}
